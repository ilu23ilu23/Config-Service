spring:
  application:
    name: MOVIES-SERVICE
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:8080/realms/ilu-realm
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://localhost:5437/db
    username: user
    password: password
  jpa:
    hibernate:
      ddl-auto: none
    show-sql: true
    properties:
      hibernate:
        format_sql: true
  flyway:
    enabled: true
    baseline-on-migrate: true
  h2:
    console:
      enabled: true
      path: /h2-console
  kafka:
    bootstrap-servers: localhost:9092,localhost:9094,localhost:9096
    consumer:
      group-id: movies-service
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      auto-offset-reset: earliest
      properties:
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
        spring.json.trusted.packages: com.example.*
        spring.json.value.default.type: com.example.moviesservice.event.BookingEvent
        spring.json.use.type.headers: false
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.add.type.headers: false

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
      register-with-eureka: true
      fetch-registry: true
server:
  port: 8081

booking:
  kafka:
    topic-movie-requests: movies.request
    topic-movie-responses: movies.response
    topic-bookings: bookings.events
    dlq: bookings.events.dlq